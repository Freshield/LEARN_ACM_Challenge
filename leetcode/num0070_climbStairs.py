# coding=utf-8
"""
@Author: Freshield
@Contact: yangyufresh@163.com
@File: num0070_climbStairs.py
@Time: 2020-04-18 16:20
@Last_update: 2020-04-18 16:20
@Desc: None
@==============================================@
@      _____             _   _     _   _       @
@     |   __|___ ___ ___| |_|_|___| |_| |      @
@     |   __|  _| -_|_ -|   | | -_| | . |      @
@     |__|  |_| |___|___|_|_|_|___|_|___|      @
@                                    Freshield @
@==============================================@
"""


def climbStairs(n):
    """
    假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
    每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
    注意：给定 n 是一个正整数。
    解法：
    使用动态规划的方法
    1. dp代表的意义，dp[i]代表当前的方法数
    2. dp的关系，dp[i] = dp[i-1] + dp[i-2]
    3. dp的初始值，dp[0]=0, dp[1]=1, dp[2]=2
    4. 遍历的方法：i的依赖方向是向左的，所以需要从小到大遍历
    整体流程：
    1. 生成dp矩阵
    2. 生成初始值
    3. 遍历dp
    4. 返回dp的数值
    """
    # 1. 生成dp矩阵
    dp = [-1] * (n+1)
    # 2. 生成初始值
    dp[0] = 0
    dp[1] = 1
    dp[2] = 2
    # 3. 遍历dp
    for i in range(3, n+1):
        dp[i] = dp[i-1] + dp[i-2]

    # 4. 返回dp的数值
    return dp[n]


if __name__ == '__main__':
    n = 4
    print(climbStairs(n))